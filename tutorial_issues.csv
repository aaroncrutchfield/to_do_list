title,body,labels
"feat(core): Project Configuration and Architecture Setup","## Feature\nProject setup and architecture configuration\n\n## Layer\nInfrastructure\n\n## Learning Objectives\n- Set up a new Flutter project\n- Configure project structure following Very Good Architecture\n- Set up testing infrastructure\n\n## Implementation Steps\n1. Create a new Flutter project\n2. Configure layers: domain, repository, business logic, presentation\n3. Set up core utilities and dependencies\n\n## Planned Commit Checkpoints\n1. ⬜ feat(core): Initial project creation\n2. ⬜ feat(core): Configure project structure with proper layers\n3. ⬜ feat(core): Set up testing infrastructure","lesson,setup"
"feat(core): Firebase Configuration and Project Dependencies","## Feature\nFirebase integration\n\n## Layer\nInfrastructure\n\n## Learning Objectives\n- Configure Firebase for the project\n- Set up Firebase Auth and Firestore\n- Add required dependencies\n\n## Implementation Steps\n1. Add Firebase SDK dependencies\n2. Configure Firebase for different environments\n3. Set up FlutterFire UI Auth dependencies\n\n## Planned Commit Checkpoints\n1. ⬜ feat(core): Add Firebase dependencies\n2. ⬜ feat(core): Configure Firebase initialization\n3. ⬜ feat(core): Set up FirebaseUI Auth packages","lesson,setup,firebase"
"feat(core): Setup Internationalization Infrastructure","## Feature\nInternationalization\n\n## Layer\nInfrastructure\n\n## Learning Objectives\n- Configure internationalization for the project\n- Set up ARB files and generation\n- Create extension methods for accessing translations\n\n## Implementation Steps\n1. Add internationalization dependencies\n2. Configure l10n.yaml\n3. Create base ARB files\n4. Set up BuildContext extension\n\n## Planned Commit Checkpoints\n1. ⬜ feat(core): Add internationalization dependencies\n2. ⬜ feat(core): Configure l10n.yaml\n3. ⬜ feat(core): Create initial ARB files\n4. ⬜ feat(core): Implement BuildContext extension\n5. ⬜ feat(core): Configure MaterialApp with localization delegates","lesson,setup,l10n"
"feat(auth): User Model and Repository Interface","## Feature\nAuthentication\n\n## Layer\nDomain\n\n## Learning Objectives\n- Create User domain model\n- Define authentication repository interface\n- Implement value objects for user properties\n\n## Implementation Steps\n1. Create User model with validation\n2. Define IAuthRepository interface\n3. Create authentication-related value objects\n\n## Planned Commit Checkpoints\n1. ⬜ feat(auth): Basic User model structure\n2. ⬜ feat(auth): User validation logic\n3. ⬜ feat(auth): AuthRepository interface definition\n4. ⬜ test(auth): Add unit tests for User model","lesson,auth,domain"
"feat(auth): Firebase Auth Repository Implementation","## Feature\nAuthentication\n\n## Layer\nRepository\n\n## Learning Objectives\n- Implement authentication repository with Firebase\n- Handle user authentication states\n- Create Firebase adapters for domain models\n\n## Implementation Steps\n1. Implement FirebaseAuthRepository\n2. Create data transfer objects\n3. Handle authentication errors\n\n## Planned Commit Checkpoints\n1. ⬜ feat(auth): Basic repository structure\n2. ⬜ feat(auth): Firebase Auth integration\n3. ⬜ feat(auth): Error handling implementation\n4. ⬜ test(auth): Unit tests with mocks","lesson,auth,repository"
"feat(auth): Authentication Bloc Implementation","## Feature\nAuthentication\n\n## Layer\nBusiness Logic\n\n## Learning Objectives\n- Create Authentication Bloc\n- Implement auth events and states\n- Handle authentication state changes\n\n## Implementation Steps\n1. Define AuthState using sealed classes\n2. Create AuthEvent classes\n3. Implement AuthBloc with proper event handling\n\n## Planned Commit Checkpoints\n1. ⬜ feat(auth): Basic bloc structure and events\n2. ⬜ feat(auth): State class definition\n3. ⬜ feat(auth): Event handling implementation\n4. ⬜ test(auth): Unit tests for state transitions","lesson,auth,business-logic"
"feat(auth): Login and Signup Screens","## Feature\nAuthentication\n\n## Layer\nPresentation\n\n## Learning Objectives\n- Implement login and signup screens with FirebaseUI\n- Connect auth UI to AuthBloc\n- Handle authentication state in UI\n\n## Implementation Steps\n1. Add auth-specific strings to ARB files\n2. Create login/signup screen using FirebaseUI\n3. Connect to AuthBloc\n\n## Planned Commit Checkpoints\n1. ⬜ feat(auth): Add authentication strings to ARB files\n2. ⬜ feat(auth): Basic screen structure with localized strings\n3. ⬜ feat(auth): FirebaseUI Auth integration\n4. ⬜ feat(auth): AuthBloc state consumption\n5. ⬜ test(auth): Widget tests for authentication UI","lesson,auth,presentation"
"feat(todo): Todo Model and Repository Interface","## Feature\nTodo List\n\n## Layer\nDomain\n\n## Learning Objectives\n- Create Todo domain model\n- Define todo repository interface\n- Implement value objects for todo properties\n\n## Implementation Steps\n1. Create Todo model with validation\n2. Define ITodoRepository interface\n3. Create todo-related value objects\n\n## Planned Commit Checkpoints\n1. ⬜ feat(todo): Basic Todo model structure\n2. ⬜ feat(todo): Todo validation logic\n3. ⬜ feat(todo): TodoRepository interface definition\n4. ⬜ test(todo): Unit tests for Todo model","lesson,todo,domain"
"feat(todo): Firestore Todo Repository Implementation","## Feature\nTodo List\n\n## Layer\nRepository\n\n## Learning Objectives\n- Implement todo repository with Firestore\n- Handle CRUD operations for todos\n- Create Firestore adapters for domain models\n\n## Implementation Steps\n1. Implement FirestoreTodoRepository\n2. Create data transfer objects\n3. Handle database errors\n\n## Planned Commit Checkpoints\n1. ⬜ feat(todo): Basic repository structure\n2. ⬜ feat(todo): Firestore integration\n3. ⬜ feat(todo): CRUD operations implementation\n4. ⬜ test(todo): Unit tests with mocks","lesson,todo,repository"
"feat(todo): Todo Bloc Implementation","## Feature\nTodo List\n\n## Layer\nBusiness Logic\n\n## Learning Objectives\n- Create Todo Bloc\n- Implement todo events and states\n- Handle CRUD operations through bloc\n\n## Implementation Steps\n1. Define TodoState using sealed classes\n2. Create TodoEvent classes\n3. Implement TodoBloc with proper event handling\n\n## Planned Commit Checkpoints\n1. ⬜ feat(todo): Basic bloc structure and events\n2. ⬜ feat(todo): State class definition\n3. ⬜ feat(todo): Event handling implementation\n4. ⬜ test(todo): Unit tests for state transitions","lesson,todo,business-logic"
"feat(todo): Todo List Screen Implementation","## Feature\nTodo List\n\n## Layer\nPresentation\n\n## Learning Objectives\n- Implement todo list screen\n- Connect UI to TodoBloc\n- Create reusable todo item widgets\n\n## Implementation Steps\n1. Add todo-specific strings to ARB files\n2. Create todo list screen\n3. Implement todo item widget\n\n## Planned Commit Checkpoints\n1. ⬜ feat(todo): Add todo list strings to ARB files\n2. ⬜ feat(todo): Basic screen structure with localized strings\n3. ⬜ feat(todo): TodoItem widget implementation\n4. ⬜ feat(todo): TodoBloc state consumption\n5. ⬜ test(todo): Widget tests for todo list UI","lesson,todo,presentation"
"feat(todo): Create and Edit Todo Screen","## Feature\nTodo List\n\n## Layer\nPresentation\n\n## Learning Objectives\n- Implement create/edit todo screen\n- Handle form validation\n- Connect to TodoBloc for CRUD operations\n\n## Implementation Steps\n1. Add form-specific strings to ARB files\n2. Create todo form screen\n3. Implement form validation\n\n## Planned Commit Checkpoints\n1. ⬜ feat(todo): Add form strings to ARB files\n2. ⬜ feat(todo): Basic form structure with localized strings\n3. ⬜ feat(todo): Form validation implementation\n4. ⬜ feat(todo): TodoBloc integration for save/update\n5. ⬜ test(todo): Widget tests for form validation","lesson,todo,presentation"
"feat(profile): Profile Model and Repository Interface","## Feature\nUser Profile\n\n## Layer\nDomain\n\n## Learning Objectives\n- Create Profile domain model\n- Define profile repository interface\n- Implement value objects for profile properties\n\n## Implementation Steps\n1. Create Profile model with validation\n2. Define IProfileRepository interface\n3. Create profile-related value objects\n\n## Planned Commit Checkpoints\n1. ⬜ feat(profile): Basic Profile model structure\n2. ⬜ feat(profile): Profile validation logic\n3. ⬜ feat(profile): ProfileRepository interface definition\n4. ⬜ test(profile): Unit tests for Profile model","lesson,profile,domain"
"feat(profile): Firebase Profile Repository Implementation","## Feature\nUser Profile\n\n## Layer\nRepository\n\n## Learning Objectives\n- Implement profile repository with Firebase\n- Handle profile data operations\n- Create Firebase adapters for domain models\n\n## Implementation Steps\n1. Implement FirebaseProfileRepository\n2. Create data transfer objects\n3. Handle database errors\n\n## Planned Commit Checkpoints\n1. ⬜ feat(profile): Basic repository structure\n2. ⬜ feat(profile): Firebase integration\n3. ⬜ feat(profile): Profile operations implementation\n4. ⬜ test(profile): Unit tests with mocks","lesson,profile,repository"
"feat(profile): Profile Bloc Implementation","## Feature\nUser Profile\n\n## Layer\nBusiness Logic\n\n## Learning Objectives\n- Create Profile Bloc\n- Implement profile events and states\n- Handle profile operations through bloc\n\n## Implementation Steps\n1. Define ProfileState using sealed classes\n2. Create ProfileEvent classes\n3. Implement ProfileBloc with proper event handling\n\n## Planned Commit Checkpoints\n1. ⬜ feat(profile): Basic bloc structure and events\n2. ⬜ feat(profile): State class definition\n3. ⬜ feat(profile): Event handling implementation\n4. ⬜ test(profile): Unit tests for state transitions","lesson,profile,business-logic"
"feat(profile): Profile Screen and Edit Profile Dialog","## Feature\nUser Profile\n\n## Layer\nPresentation\n\n## Learning Objectives\n- Implement profile screen\n- Create edit profile dialog\n- Connect UI to ProfileBloc\n\n## Implementation Steps\n1. Add profile-specific strings to ARB files\n2. Create profile screen\n3. Implement edit profile dialog\n\n## Planned Commit Checkpoints\n1. ⬜ feat(profile): Add profile strings to ARB files\n2. ⬜ feat(profile): Basic screen structure with localized strings\n3. ⬜ feat(profile): Edit dialog implementation\n4. ⬜ feat(profile): ProfileBloc state consumption\n5. ⬜ test(profile): Widget tests for profile UI","lesson,profile,presentation"
"feat(theme): Theme Preferences Model and Repository Interface","## Feature\nTheme Management\n\n## Layer\nDomain\n\n## Learning Objectives\n- Create Theme domain model\n- Define theme repository interface\n- Model theme preferences\n\n## Implementation Steps\n1. Create ThemePreference model\n2. Define IThemeRepository interface\n3. Create theme-related enums and utilities\n\n## Planned Commit Checkpoints\n1. ⬜ feat(theme): Basic ThemePreference model\n2. ⬜ feat(theme): ThemeRepository interface definition\n3. ⬜ test(theme): Unit tests for theme models","lesson,theme,domain"
"feat(theme): Local Storage Theme Repository Implementation","## Feature\nTheme Management\n\n## Layer\nRepository\n\n## Learning Objectives\n- Implement theme repository with local storage\n- Handle theme persistence\n- Create storage adapters for theme models\n\n## Implementation Steps\n1. Implement LocalStorageThemeRepository\n2. Create data transfer objects\n3. Handle storage errors\n\n## Planned Commit Checkpoints\n1. ⬜ feat(theme): Basic repository structure\n2. ⬜ feat(theme): Local storage integration\n3. ⬜ feat(theme): Theme persistence implementation\n4. ⬜ test(theme): Unit tests with mocks","lesson,theme,repository"
"feat(theme): Theme Bloc Implementation","## Feature\nTheme Management\n\n## Layer\nBusiness Logic\n\n## Learning Objectives\n- Create Theme Bloc\n- Implement theme events and states\n- Handle theme changes through bloc\n\n## Implementation Steps\n1. Define ThemeState using sealed classes\n2. Create ThemeEvent classes\n3. Implement ThemeBloc with proper event handling\n\n## Planned Commit Checkpoints\n1. ⬜ feat(theme): Basic bloc structure and events\n2. ⬜ feat(theme): State class definition\n3. ⬜ feat(theme): Event handling implementation\n4. ⬜ test(theme): Unit tests for state transitions","lesson,theme,business-logic"
"feat(theme): Theme Toggle UI Implementation","## Feature\nTheme Management\n\n## Layer\nPresentation\n\n## Learning Objectives\n- Implement theme toggle in profile screen\n- Connect theme UI to ThemeBloc\n- Apply theme changes to application\n\n## Implementation Steps\n1. Add theme-specific strings to ARB files\n2. Create theme toggle widget\n3. Integrate with profile screen\n\n## Planned Commit Checkpoints\n1. ⬜ feat(theme): Add theme strings to ARB files\n2. ⬜ feat(theme): Basic toggle widget with localized strings\n3. ⬜ feat(theme): Profile screen integration\n4. ⬜ feat(theme): ThemeBloc state consumption\n5. ⬜ test(theme): Widget tests for theme toggle","lesson,theme,presentation"
"feat(navigation): Auto Route Navigation Setup","## Feature\nNavigation\n\n## Layer\nInfrastructure\n\n## Learning Objectives\n- Set up Auto Route navigation\n- Define route configuration\n- Implement route guards for authenticated routes\n\n## Implementation Steps\n1. Configure Auto Route dependencies\n2. Create route configuration\n3. Implement auth guards\n\n## Planned Commit Checkpoints\n1. ⬜ feat(navigation): Auto Route setup\n2. ⬜ feat(navigation): Route configuration definition\n3. ⬜ feat(navigation): Auth guard implementation\n4. ⬜ test(navigation): Unit tests for navigation","lesson,navigation"
"feat(navigation): Bottom Navigation Implementation","## Feature\nNavigation\n\n## Layer\nPresentation\n\n## Learning Objectives\n- Implement bottom navigation bar\n- Configure tab-based navigation\n- Handle state persistence between tabs\n\n## Implementation Steps\n1. Add navigation-specific strings to ARB files\n2. Create bottom navigation widget\n3. Configure tab routes\n\n## Planned Commit Checkpoints\n1. ⬜ feat(navigation): Add navigation strings to ARB files\n2. ⬜ feat(navigation): Basic bottom navigation structure with localized strings\n3. ⬜ feat(navigation): Tab configuration\n4. ⬜ feat(navigation): State persistence between tabs\n5. ⬜ test(navigation): Widget tests for navigation UI","lesson,navigation,presentation"
"feat(app): Feature Integration and Final Polish","## Feature\nIntegration\n\n## Layer\nApplication\n\n## Learning Objectives\n- Integrate all features\n- Apply final polish and UI refinements\n- Ensure cross-feature communication\n\n## Implementation Steps\n1. Integrate authentication with todo and profile\n2. Ensure theme applies globally\n3. Final UI refinements\n\n## Planned Commit Checkpoints\n1. ⬜ feat(app): Feature integration\n2. ⬜ feat(app): UI polishing\n3. ⬜ feat(app): Integration tests\n4. ⬜ feat(app): Final documentation","lesson,integration"
